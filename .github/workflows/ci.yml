name: Continuous Integration

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'Documentation/**'
      - '.github/dependabot.yml'
      - 'LICENSE'
      - '.gitignore'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'Documentation/**'
      - '.github/dependabot.yml'
      - 'LICENSE'
      - '.gitignore'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true  # Required for Git LFS files (models, GPU libraries)

      # Cache Git LFS files to reduce bandwidth usage
      - name: Cache Git LFS objects
        uses: actions/cache@v4
        with:
          path: .git/lfs
          key: lfs-${{ runner.os }}-${{ hashFiles('.gitattributes') }}
          restore-keys: |
            lfs-${{ runner.os }}-

      - name: Checkout LFS objects
        run: git lfs pull

      # Install pnpm (required but not in original workflow)
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      # Cache Rust dependencies and build artifacts
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('src-tauri/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Platform-specific system dependencies
      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libasound2-dev

      - name: Install macOS dependencies
        if: matrix.platform == 'macos-latest'
        run: |
          # Tauri dependencies are typically pre-installed on macOS runners
          echo "No additional dependencies needed for macOS"

      - name: Install Windows dependencies
        if: matrix.platform == 'windows-latest'
        run: |
          # WebView2 is pre-installed on GitHub Actions Windows runners
          echo "No additional dependencies needed for Windows"

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: pnpm install

      # Rust linting (in correct directory)
      - name: Lint Rust code (clippy)
        working-directory: src-tauri
        run: cargo clippy --all-targets --all-features -- -D warnings

      # Rust tests (in correct directory)
      - name: Test Rust code
        working-directory: src-tauri
        run: cargo test --verbose

      # Build frontend
      - name: Build frontend
        run: pnpm build

      # Build Tauri application (platform-specific)
      - name: Build Tauri application
        run: pnpm tauri build
        env:
          # Disable code signing for CI builds
          TAURI_PRIVATE_KEY: ""
          TAURI_KEY_PASSWORD: ""

      # Upload build artifacts for inspection (optional)
      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}
          path: |
            src-tauri/target/release/bundle/
          retention-days: 7

  # Additional job: Check code formatting
  format-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check Rust formatting
        working-directory: src-tauri
        run: cargo fmt --all -- --check

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install frontend dependencies
        run: pnpm install

      # Note: Add frontend linting if configured (ESLint, Prettier, etc.)
      # - name: Lint frontend code
      #   run: pnpm lint
